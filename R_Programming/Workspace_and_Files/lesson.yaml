- Class: meta
  Course: R Programming
  Lesson: Workspace and Files
  Author: David Kane
  Type: Coursera
  Organization: Williams College
  Version: 0.1.1

- Class: text
  Output: In this lesson, you'll learn how to examine your local workspace in R and begin to explore the relationship between your workspace and the file system of your machine.

- Class: text
  Output: Because different operating systems have different conventions with regards to things like file paths, the outputs of these commands may vary across machines.

- Class: text
  Output: Let's jump right in so you can get a feel for how these special functions work!

- Class: cmd_question
  Output: Determine which directory your R session is using as its current working directory.
  CorrectAnswer: getwd()
  AnswerTests: omnitest(correctExpr='getwd()')
  Hint: Type getwd() to determine the current working directory.

- Class: cmd_question
  Output: Show all the objects in your local workspace.
  CorrectAnswer: ls()
  AnswerTests: omnitest(correctExpr='ls()')
  Hint: Type ls() to view all the objects in your local workspace.

- Class: text
  Output: Some R commands are the same as the Unix equivalents. Another reason why learning Unix is a good idea.

- Class: cmd_question
  Output: Show all the files in your working directory.
  CorrectAnswer: list.files()
  AnswerTests: omnitest(correctExpr='list.files()')
  Hint: Type list.files() to all the files in your working directory.

- Class: text
  Output: As we go through this lesson, you should be consider examining the help page for each new function. 

- Class: cmd_question
  Output: Pull up the help for for list.files()?
  CorrectAnswer: ?list.files
  AnswerTests: omnitest(correctExpr='?list.files')
  Hint: Type ?list.files to retrieve the help file for list.files.


- Class: text
  Output: One of the most helpful parts of any R help file is the See Also section. Read that section for list.files. These are some of the functions we will be using in later portions of this lesson.

- Class: cmd_question
  Output: Show all the files in your working directory, including their full paths.
  CorrectAnswer: list.files(full.names = TRUE)
  AnswerTests: omnitest(correctExpr='list.files(full.names = TRUE)')
  Hint: Type list.files(full.names = TRUE) to show all the files in your working directory, including their full paths.

- Class: text
  Output: Using the arg() function on a function name is also a handy way to see what arguments a function can take. 


- Class: cmd_question
  Output: Use the arg() function to determine the arguments to list.files()?
  CorrectAnswer: arg(list.files)
  AnswerTests: omnitest(correctExpr='arg(list.files)')
  Hint: Type arg(list.files) to see the arguments to list.files.


- Class: cmd_question
  Output: Assign the value of the current working directory to a variable called "old.dir".
  CorrectAnswer: old.dir <- getwd()
  AnswerTests: omnitest(correctExpr='old.dir <- getwd()')
  Hint: Type old.dir <- getwd() to sAssign the value of the current working directory to a variable called "old.dir".

- Class: text
  Output: We will use old.dir at the end of these questions to move back to the place that we started. A lot of query functions like getwd() have the useful property that they return the answer to the question as a result of the function.

- Class: cmd_question
  Output: Create a directory in the current working directory called "testdir".
  CorrectAnswer: dir.create("testdir")
  AnswerTests: omnitest(correctExpr='dir.create("testdir")')
  Hint: Type dir.create("testdir") to create a directory in the current working directory called "testdir".

- Class: text
  Output: We will do all our work in this new directory and then delete it after we are done. This is the R analog to "Take only pictures, leave only footprints."

- Class: cmd_question
  Output:  Change your working directory to "testdir".
  CorrectAnswer: setwd("testdir")
  AnswerTests: omnitest(correctExpr='setwd("testdir")')
  Hint: Use setwd("testdir") to change your working directory to "testdir".

- Class: text
  Output: In general, you will want your working directory to be someplace sensible, perhaps created for the specific project that you are working on. In fact, organizing your work in R packages using R Studio is an excellent option. But those topics are beyond the scope of this lesson.

- Class: cmd_question
  Output: Create a file in your working directory called "mytest.R". (Note that we purposely word these questions in such a way that a web search should lead you to the appropriate R command. In this case, searching for "R create file" should work well.)
  CorrectAnswer: file.create("mytest.R")
  AnswerTests: omnitest(correctExpr='file.create("mytest.R")')
  Hint: file.create("mytest.R") will get the job done!

- Class: cmd_question
  Output: This should be the only file in this newly created directory. What R command (that we have already covered) will conform this?
  CorrectAnswer: list.files()
  AnswerTests: omnitest(correctExpr='list.files()')
  Hint: list.files() shows that the directory only contains mytest.R.


- Class: cmd_question
  Output: Check to see if "mytest.R" exists in the working directory
  CorrectAnswer: file.exists("mytest.R")
  AnswerTests: omnitest(correctExpr='file.exists("mytest.R")')
  Hint: Use file.exists("mytest.R") to check that a file exists.

- Class: text
  Output: These sorts of functions are mostly useless for interactive use. But, if you are running a program that loops through a series of files and does some processing on each one, you will want to check to see that each exists.

- Class: cmd_question
  Output: Access information about "my.test.R". That is, what command, along with the appropriate argument, will return information about the file "my.test.R"?
  CorrectAnswer: file.info("mytest.R")
  AnswerTests: omnitest(correctExpr='file.info("mytest.R")')
  Hint: file.info("mytest.R") will do the trick!

- Class: text
  Output: You can use the $ operator --- e.g., file.info("mytest.R")$mode --- to grab specific items.

- Class: cmd_question
  Output: Change the name of the file "mytest.R" to "mytest2.R".
  CorrectAnswer: file.rename("mytest.R", "mytest2.R")
  AnswerTests: omnitest(correctExpr='file.rename("mytest.R", "mytest2.R")')
  Hint: file.rename("mytest.R", "mytest2.R") is the answer. Again, Googling using key words from the question, along with the letter R, will often give you a good hint.

- Class: text
  Output: Your operating system will provide simpler tools for these sorts of tasks. But having the ability to manipulate files programatically is useful. You might now try to delete mytest.R using file.remove("mytest.R"), but that won't work since mytest.R no longer exists. You have already renamed it.

- Class: cmd_question
  Output: Make a copy of "mytest2.R" called "mytest3.R".
  CorrectAnswer: file.copy("mytest2.R", "mytest3.R")
  AnswerTests: omnitest(correctExpr='file.copy("mytest2.R", "mytest3.R")')
  Hint: file.copy("mytest2.R", "mytest3.R") works.

- Class: text
  Output: You now have two files in the current directory. That may not seem very interesting. But what if you were working with dozens, or millions, of individual files? In that case, being able to programatically act on many files would be absolutely necessary.



####

- Class: cmd_question
  Output: Create a directory in the current working directory called "testdir2" and a subdirectory for it called "testdir3", all in one command.
  CorrectAnswer: dir.create("testdir2/testdir3", recursive = TRUE)
  AnswerTests: omnitest(correctExpr='dir.create("testdir2/testdir3", recursive = TRUE)')
  Hint: dir.create("testdir2/testdir3", recursive = TRUE) works. If you forgot the recursive argument, the command may have appeared to work. Why?

- Class: cmd_question
  Output: Delete the "testdir2" directory that you created.
  CorrectAnswer: unlink("testdir2", recursive = TRUE)
  AnswerTests: omnitest(correctExpr='unlink("testdir2", recursive = TRUE)')
  Hint: unlink("testdir2", recursive = TRUE) works. 

- Class: text
  Output: Again, you need the recursive = TRUE argument. Otherwise, R is concerned that you are unaware that, when deleting testdir2, you are also deleting testdir3, which is nested within it. R reasons that, if you don't tell it that recursive equals TRUE, you don't know that something is in testdir2. So, it tries to prevent you from making a mistake.


##########

- Class: cmd_question
  Output: View the contents of shape_mat.
  CorrectAnswer: shape_mat
  AnswerTests: any_of_exprs('shape_mat', 'print(shape_mat)')
  Hint: Type shape_mat to view its contents.




- Class: cmd_question
  Output: Use the class() function to confirm that shape_mat is a matrix.
  CorrectAnswer: class(shape_mat)
  AnswerTests: omnitest(correctExpr='class(shape_mat)')
  Hint: class(shape_mat) returns the class of shape_mat.

- Class: text
  Output: As we've seen, sapply() always attempts to simplify the result given by lapply(). It has been successful in doing so for each of the examples we've looked at so far. Let's look at an example where sapply() can't figure out how to simplify the result and thus returns a list, no different from lapply().

- Class: cmd_question
  Output: When given a vector, the unique() function returns a vector with all duplicate elements removed. In other words, unique() returns a vector of only the 'unique' elements. To see how it works, try unique(c(3, 4, 5, 5, 5, 6, 6)).
  CorrectAnswer: unique(c(3, 4, 5, 5, 5, 6, 6))
  AnswerTests: omnitest(correctExpr='unique(c(3, 4, 5, 5, 5, 6, 6))')
  Hint: Do unique(c(3, 4, 5, 5, 5, 6, 6)) to see how the unique() function works.

- Class: cmd_question
  Output: We want to know the unique values for each variable in the flags dataset. To accomplish this, use lapply() to apply the unique() function to each column in the flags dataset, storing the result in a variable called unique_vals.
  CorrectAnswer: unique_vals <- lapply(flags, unique)
  AnswerTests: omnitest(correctExpr='unique_vals <- lapply(flags, unique)')
  Hint: Try unique_vals <- lapply(flags, unique).

- Class: cmd_question
  Output: Print the value of unique_vals to the console.
  CorrectAnswer: unique_vals
  AnswerTests: any_of_exprs('unique_vals', 'print(unique_vals)')
  Hint: Type unique_vals to view its contents.

- Class: cmd_question
  Output: "Since unique_vals is a list, you can use what you've learned to determine the length of each element of unique_vals (i.e. the number of unique values for each variable). Simplify the result, if possible. Hint: Apply the length() function to each element of unique_vals."
  CorrectAnswer: sapply(unique_vals, length)
  AnswerTests: omnitest(correctExpr='sapply(unique_vals, length)')
  Hint: Apply the length() function to each element of the unique_vals list using sapply(). Remember, no parentheses after the name of the function you are applying (i.e. length).

- Class: text
  Output: The fact that the elements of the unique_vals list are all vectors of *different* length poses a problem for sapply(), since there's no obvious way of simplifying the result.

- Class: cmd_question
  Output: Use sapply() to apply the unique() function to each column of the flags dataset to see that you get the same unsimplified list that you got from lapply().
  CorrectAnswer: sapply(flags, unique)
  AnswerTests: omnitest(correctExpr='sapply(flags, unique)')
  Hint: Use sapply(flags, unique) to apply the unique function to each column of flags, failing to simplify the result.

- Class: text
  Output: Occasionally, you may need to apply a function that is not yet defined, thus requiring you to write your own. Writing functions in R is beyond the scope of this lesson, but let's look at a quick example of how you might do so in the context of loop functions.

- Class: text
  Output: Pretend you are interested in only the second item from each element of the unique_vals list that you just created. Since each element of the unique_vals list is a vector and we're not aware of any built-in function in R that returns the second element of a vector, we will construct our own function.

- Class: cmd_question
  Output: Go back to your original working directory. (Recall that we created the variable old.dir with the full path for the orginal working directory at the start of these questions.)
  CorrectAnswer: setwd(old.dir)
  AnswerTests: calculates_same_value('setwd(old.dir)')
  Hint: Use setwd(old.dir).

- Class: text
  Output: It is often help to save the settings that you had before you began an analysis and the go back to them at the end. This trick is often used within functions: you save, say, the par() settings that you started with, mess around a bunch, and then set them back to the original values at the end. This isn't the same as what we have done here, but it seems similar enough to mention.

- Class: cmd_question
  Output: Delete the "testdir" directory that you just left (and everything in it)
  CorrectAnswer: unlink("testdir", recursive = TRUE)
  AnswerTests: calculates_same_value('unlink("testdir", recursive = TRUE)')
  Hint: Use unlink("testdir", recursive = TRUE).

- Class: text
  Output: In this lesson, you learned how to examine your R workspace and work with the file system of your machine from within R.
