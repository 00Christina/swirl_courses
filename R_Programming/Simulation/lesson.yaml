- Class: meta
  Course: R Programming
  Lesson: Simulation
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: One of the great advantages of using a statistical programming language like R is its vast collection of tools for simulating random numbers.

- Class: text
  Output: This lesson assumes familiarity with a few common probability distributions, but these topics will only be discussed with respect to random number generation. Even if you have no prior experience with these concepts, you should be able to complete the lesson and understand the main ideas.

- Class: cmd_question
  Output: The first function we'll use to generate random numbers is sample(). Use ?sample to pull up the documentation.
  CorrectAnswer: ?sample
  AnswerTests: omnitest(correctExpr='?sample')
  Hint: Use '?sample' to pull up the documentation for the sample() function.

- Class: cmd_question
  Output: "Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE)."
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: Type sample(1:6, 4, replace = TRUE) to simulate rolling four six-sided dice.

- Class: cmd_question
  Output: Now repeat the command to see how your result differs. (The probability of rolling the exact same result is (1/6)^4 = 0.00077, which is pretty small!)
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: Type sample(1:6, 4, replace = TRUE) to simulate rolling four six-sided dice again.

- Class: text
  Output: sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers between 1 and 6, WITH replacement. Sampling with replacement simply means that each number is "replaced" after it is selected, so that the same number can show up more than once. This is what we want here, since what you roll on one die shouldn't affect what you roll on any of the others.

- Class: cmd_question
  Output: Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without replacement, simply leave off the 'replace' argument.
  CorrectAnswer: sample(1:20, 10)
  AnswerTests: match_call('sample(1:20, 10)')
  Hint: Type sample(1:20, 10) to sample 10 numbers between 1 and 20, without replacement.

- Class: cmd_question
  Output: LETTERS is a predefined variable in R containing a vector of all 26 letters of the English alphabet. Take a look at it now.
  CorrectAnswer: LETTERS
  AnswerTests: omnitest(correctExpr='LETTERS')
  Hint: Just type LETTERS to print its contents to the console.

- Class: cmd_question
  Output: The sample() function can also be used to permute, or rearrange, the elements of a vector. For example, try sample(LETTERS) to permute all 26 letters of the English alphabet.
  CorrectAnswer: sample(LETTERS)
  AnswerTests: omnitest(correctExpr='sample(LETTERS)')
  Hint: Use sample(LETTERS) to permute all 26 letters of the English alphabet.

- Class: text
  Output: This is identical to taking a sample of size 26 from LETTERS, without replacement. When the 'size' argument to sample() is not specified, R takes a sample equal in size to the vector from which you are sampling.

- Class: text
  Output: Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This particular coin has a 0.3 probability of landing 'tails' and a 0.7 probability of landing 'heads'.

- Class: cmd_question
  Output: Let the value 0 represent tails and the value 1 represent heads. Use sample() to draw a sample of size 100 from the vector c(0,1), with replacement. Since the coin is unfair, we must attach specific probabilities to the values 0 (tails) and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Finally, assign the result to a new variable called flips.
  CorrectAnswer: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
  AnswerTests: match_call('flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))')
  Hint: 'The following command will produce 100 flips of an unfair coin and assign the result: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))'

- Class: cmd_question
  Output: View the contents of the flips variable.
  CorrectAnswer: flips
  AnswerTests: omnitest(correctExpr='flips')
  Hint: Just type flips to view its contents.

- Class: cmd_question
  Output: Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of our coin flips to have the value 1. Count the actual number of 1s contained in flips using the sum() function.
  CorrectAnswer: sum(flips)
  AnswerTests: omnitest(correctExpr='sum(flips)')
  Hint: sum(flips) will add up all the 1s and 0s, giving you the total number of 1s in flips.

- Class: cmd_question
  Output: Since a coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), we can use use rbinom() to simulate a binomial random variable. Pull up the documentation for rbinom() using ?rbinom.
  CorrectAnswer: ?rbinom
  AnswerTests: omnitest(correctExpr='?rbinom')
  Hint: Type ?rbinom to pull up the help file for rbinom().

- Class: cmd_question
  Output: A binomial random variable represents the number of 'successes' (heads) in a given number of independent 'trials' (coin flips). Therefore, we can generate a single random variable that represents the number of heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only specify the probability of 'success' (heads) and not the probability of 'failure' (tails). Try it now.
  CorrectAnswer: rbinom(1, size = 100, prob = 0.7)
  AnswerTests: match_call('rbinom(1, size = 100, prob = 0.7)')
  Hint: Call rbinom() with n = 1, size = 100, and prob = 0.7.

- Class: cmd_question
  Output: Equivilently, if we want to see all of the 0s and 1s, we can perform 100 observations, each of size 1, with success probability of 0.7. Give it a try, assigning the result to a new variable called flips2.
  CorrectAnswer: flips2 <- rbinom(100, size = 1, prob = 0.7)
  AnswerTests: match_call('flips2 <- rbinom(100, size = 1, prob = 0.7)')
  Hint: Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

- Class: cmd_question
  Output: View the contents of flips2.
  CorrectAnswer: flips2
  AnswerTests: omnitest('flips2')
  Hint: Type flips2 to view its contents.

- Class: cmd_question
  Output: Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!
  CorrectAnswer: sum(flips2)
  AnswerTests: omnitest('sum(flips2)')
  Hint: Use sum(flips) to count the number of 1s.

- Class: cmd_question
  Output: Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions. Pull up the documentation for rnorm() now.
  CorrectAnswer: ?rnorm
  AnswerTests: omnitest('?rnorm')
  Hint: Type ?rnorm to view its help file.

- Class: cmd_question
  Output: The standard normal distribution has mean 0 and standard deviation 1. As you'll see in the documentation, the default values for the 'mean' and 'sd' arguments to rnorm() are 0 and 1, respectively. Thus, rnorm(10) will generate 10 random numbers from a standard normal distribution. Give it a try.
  CorrectAnswer: rnorm(10)
  AnswerTests: omnitest('rnorm(10)')
  Hint: Use rnorm(10) to generate 10 random numbers from a standard normal distribution.

- Class: cmd_question
  Output: Now do the same, except with a mean of 100 and a standard deviation of 25.
  CorrectAnswer: rnorm(10, 100, 25)
  AnswerTests: match_call('rnorm(10, 100, 25)')
  Hint: Use rnorm(10, mean = 100, sd = 25) to generate 10 random numbers from a normal distribution with mean 100 and standard deviation 25.

- Class: text
  Output: All of the standard probability distributions are built in to R, including Poisson (rpois()), exponential (rexp()), chi-squared (rchisq()), gamma (rgamma()), .... Well, you see the pattern.

- Class: text
  Output: Each of these distributions has an r*** function (for "random"), a d*** function (for "density"), a p*** (for "probability"), and q*** (for "quantile"). I encourage you to explore these other functions on your own.