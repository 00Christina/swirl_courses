- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: Base_Plotting_System
  Author: Swirl Coders
  Type: Coursera
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output: "Base_Plotting_System. (Slides for this and other Data Science courses may be found at github https://github.com/DataScienceSpecialization/courses/. If you care to use them, they must be downloaded as a zip file and viewed locally. This lesson corresponds to 04_ExploratoryAnalysis/PlottingBase.)"

- Class: text
  Output:  In this last lesson, we gave you an overview of the three plotting systems in R. In this lesson we'll focus on the base plotting system and talk more about how you can exploit all its many parameters to get the plot you want. 

- Class: text
  Output: We'll focus on using the base plotting system to create graphics on the screen device rather than another graphics device.

- Class: text
  Output:  The core plotting and graphics engine in R is encapsulated in two packages. The first is the graphics package which contains plotting functions for the "base" system. The functions in this package include plot, hist, boxplot, barplot and many others. The second package is grDevices which  contains all the code implementing the various graphics devices, including X11, PDF, PostScript, PNG, etc.

- Class: text
  Output: Base graphics are often constructed piecemeal, with each aspect of the plot handled separately through a particular function call; this is often conceptually simpler. Usually you start with a plot function (such as plot, hist, or boxplot), then you use annotation functions (text, abline, points) to add to or modify your plot. 

- Class: text
  Output: Before making a plot you have to determine where the plot will appear and what it will be used for.  Is there a large amount of data going into the plot? Or is it just a few points? Do you need to be able to dynamically resize the graphic?

- Class: mult_question
  Output: What do you think is a disadvantage of the Base Plotting System?
  AnswerChoices:  It's intuitive and exploratory; It mirrors how we think of building plots and analyzing data; You can't go back once a plot has started; A complicated plot is a series of simple R commands
  CorrectAnswer: You can't go back once a plot has started
  AnswerTests: omnitest(correctVal='You can\'t go back once a plot has started')
  Hint: Which choice  has a negative contraction in it?

- Class: text
  Output: Yes! The base system is very intuitive and easy to use. You can't go backwards, though, say, if you need to readjust margins or misspell a caption. A finished plot will be a series of R commands, so it's difficult to translate a finished plot into a different system.

- Class: text
  Output:  Base graphics are used most commonly and are a very powerful system for creating 2-D graphics. There are two phases to creating a base plot. You first have to initialize a new plot. Then you may annotate (add to) an existing plot if you need to.

- Class: text
  Output:  Calling a basic routine such as plot(x, y) or hist(x) will launch a graphics device (if one is not already open) and draw a new plot on the device. If the arguments to plot are not of some special class, then the default method for plot is called.

- Class: text
  Output: As you'll see, most of these plotting functions have many arguments, for example, setting the title, labels of axes, plot character, etc. Some of the parameters can be set when you call the function or they can be added later in a separate function call.

- Class: cmd_question
  Output:  The basic plotting parameters are documented in the R help page for the function par. You can use par to set parameters OR to find out what values are already set. To see just how much flexibility you have, run the R command length with the argument par() now. 
  CorrectAnswer: length(par())
  AnswerTests: omnitest(correctExpr='length(par())')
  Hint: Type length(par()) at the command prompt.
 
- Class: cmd_question
  Output:  So there are a boatload (72) of parameters that par() gives you access to. Run the R function names with par() as its argument to see what these parameters are.
  CorrectAnswer: names(par())
  AnswerTests: omnitest(correctExpr='names(par())')
  Hint: Type names(par()) at the command prompt.
 
- Class: cmd_question
  Output: Variety is the spice of life. You probably will not deal with a lot of these. You can always run ?par to see what they do. For now, run the command par()$pin and see what you get.
  CorrectAnswer: par()$pin
  AnswerTests: ANY_of_exprs('par()$pin','par(\"pin\")','par(\'pin\')')
  Hint: Type par()$pin at the command prompt.
 
- Class: mult_question
  Output: Alternatively, you could have gotten the same result by running par("pin") or par('pin')).  What do you think these two numbers represent?
  AnswerChoices: Plot dimensions; A confidence interval; Random numbers; Coordinates of the center of the plot window
  CorrectAnswer: Plot dimensions
  AnswerTests: omnitest(correctVal='Plot dimensions')
  Hint: The function par specifies graphical parameters so the answer should deal with plots. That leaves two choices. The 'in' in 'pin' specifies inches.

- Class: cmd_question
  Output: Now, run the command par("fg") or par()$fg and see what you get.
  CorrectAnswer: par()$fg
  AnswerTests: ANY_of_exprs('par(\"fg\")','par()$fg','par(\'fg\')')
  Hint: Type par()$fg OR par('fg') OR par("fg") at the command prompt.
 
- Class: mult_question
  Output: It gave you a color, right? Since par()$fg specifies foreground color, what do you think par()$bg specifies?
  AnswerChoices: Background color; Better color; blue-green; Beautiful color
  CorrectAnswer: Background color
  AnswerTests: omnitest(correctVal='Background color')
  Hint: What's the opposite of foreground?

- Class: text
  Output: Now we'll go through some quick examples of basic plotting before we delve into gory  details. We'll use the dataset airquality (part of the library datasets) which we've loaded for you . This shows ozone and other air measurements for New York City for 5 months in 1973.

- Class: cmd_question
  Output:  Use the R command head with airquality as an argument to see what the data looks like.
  CorrectAnswer: head(airquality)
  AnswerTests: omnitest(correctExpr='head(airquality)')
  Hint: Type head(airquality) at the command prompt.
 
- Class: cmd_question
  Output: We see the dataset contains 6 columns of data. Run the command range with two arguments. The first is the ozone column of airquality, specified by airquality$Ozone, and the second is the boolean na.rm set equal to TRUE. If you don't specify this second argument, you won't get a meaningful result.
  CorrectAnswer: range(airquality$Ozone,na.rm=TRUE)
  AnswerTests: omnitest(correctExpr='range(airquality$Ozone,na.rm=TRUE)')
  Hint: Type range(airquality$Ozone,na.rm=TRUE) at the command prompt.
 
- Class: cmd_question
  Output: So the measurements range from 1 to 168. First we'll do a simple histogram of this ozone column to show the distribution of measurements. Use the R command hist with the argument airquality$Ozone.   
  CorrectAnswer: hist(airquality$Ozone)
  AnswerTests: omnitest(correctExpr='hist(airquality$Ozone)')
  Hint: Type hist(airquality$Ozone) at the command prompt.
 
- Class: mult_question
  Output: Simple, right? R put a title on the histogram and labeled both axes for you. What is the most frequent count? 
  AnswerChoices: Under 25; Between 60 and 75; Over 150; Over 100 
  CorrectAnswer: Under 25
  AnswerTests: omnitest(correctVal='Under 25')
  Hint: Where is the highest bar?

- Class: cmd_question
  Output: Next we'll do a boxplot. First, though, run the R command table with the argument airquality$Month.
  CorrectAnswer: table(airquality$Month)
  AnswerTests: omnitest(correctExpr='table(airquality$Month)')
  Hint: Type table(airquality$Month) at the command prompt.
 
- Class: cmd_question
  Output: We see that the data covers 5 months, May through September. We'll want a boxplot of ozone as a function of the month in which the measurements were taken so we'll use the R formula Ozone~Month as the first argument of boxplot. Our second argument will be airquality, the dataset from which the variables of the first argument are taken. We'll also specify labels for the 2 axes. Set xlab equal to "Month" and ylab equal to "Ozone (ppb)". This last indicates the measurements were in parts per billion. Try this now.
  CorrectAnswer: boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)")
  AnswerTests: omnitest(correctExpr='boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)")')
  Hint: Type boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)") at the command prompt.
 
- Class: text
  Output:  Note that boxplot, unlike hist, did NOT specify a title and axis labels for you automatically. 

- Class: cmd_question
  Output: Now we'll show you how to plot a simple two-dimensional scatterplot using the R function plot. This will show the relationship between Wind (x-axis) and Ozone (y-axis). We'll use the function plot with those two arguments (Wind and Ozone, in that order) as the second argument to the R command with. The first argument of with will be airquality, the dataset containing Wind and Ozone. Using  with allows us to avoid using the longer notation, e.g., airquality$Wind. Try running this now now. 
  CorrectAnswer: with(airquality, plot(Wind, Ozone))
  AnswerTests: omnitest(correctExpr='with(airquality, plot(Wind, Ozone))')
  Hint: Type with(airquality, plot(Wind, Ozone)) at the command prompt.
 
- Class: text
  Output:  Note that plot generated labels for the x and y axes but no title. 

- Class: cmd_question
  Output: Let's add one now with the R command title. Use the argument main set equal to the string "Ozone and Wind in New York City". 
  CorrectAnswer: title(main="Ozone and Wind in New York City")
  AnswerTests: omnitest(correctExpr='title(main=\"Ozone and Wind in New York City\")')
  Hint: Type title(main="Ozone and Wind in New York City") at the command prompt.



- Class: text
  Output: The lattice system has several disadvantages. First, it is sometimes awkward to specify an entire plot in a single function call. Annotating a plot may not be especially intuitive. Second, using panel functions and subscripts is somewhat difficult  and requires preparation. Finally, you cannot "add" to the plot once it is created as you can with the base system.


- Class: text
  Output: Not surprisingly we see that the bigger the engine displacement the lower the gas mileage.

- Class: text
  Output: Let's review!

- Class: mult_question
  Output: Which R plotting system is based on an artist's palette?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: base
  AnswerTests: omnitest(correctVal='base')
  Hint: The oldest and simplest system doesn't require loading an extra package.

- Class: mult_question
  Output: Which R plotting system does NOT allow you to annotate plots with separate calls?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: lattice
  AnswerTests: omnitest(correctVal='lattice')
  Hint: Recall that with the lattice system the whole plot has to be drawn with just one call.

- Class: mult_question
  Output: Which R plotting system combines the best features of the other two?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: ggplot2
  AnswerTests: omnitest(correctVal='ggplot2')
  Hint: Recall that ggplots allows you to annotate separately (as base does) and allows you to plot conditioning plots easily (as lattice does).

- Class: mult_question
  Output: Which R plotting system uses a graphics grammar?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: ggplot2
  AnswerTests: omnitest(correctVal='ggplot2')
  Hint: Look carefully at the names!

- Class: mult_question
  Output: Which R plotting system forces you to make your entire plot with one call?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: lattice
  AnswerTests: omnitest(correctVal='lattice')
  Hint: The base and ggplot2 allow you to build up your plots with several calls.

- Class: mult_question
  Output: Which of the following sells high quality artists' brushes?
  AnswerChoices:  base; ggplot2; lattice; Winsor&Newton
  CorrectAnswer: Winsor&Newton
  AnswerTests: omnitest(correctVal='Winsor&Newton')
  Hint: Which of the choices has nothing to do with plotting?

- Class: text
  Output: Congrats! You've concluded this plotting lesson. We hope you didn't find it plodding.

