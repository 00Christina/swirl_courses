- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: GGPlot2_Part1
  Author: Swirl Coders
  Type: Coursera
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output: "GGPlot2_Part1. (Slides for this and other Data Science courses may be found at github https://github.com/DataScienceSpecialization/courses/. If you care to use them, they must be downloaded as a zip file and viewed locally. This lesson corresponds to 04_ExploratoryAnalysis/ggplot2.)"


- Class: text
  Output:  In another lesson, we gave you an overview of the three plotting systems in R. In this lesson we'll focus on the third and newest plotting system in R, ggplot2.  As we did with the other two systems, we'll focus on creating graphics on the screen device rather than another graphics device.

- Class: text
  Output:  The ggplot2 package is an add-on package available from CRAN via install.packages(). (Don't worry, we've installed it for you already.) It is an implementation of The Grammar of Graphics, an abstract concept (as well as book) authored and invented by Leland Wilkinson and implemented by Hadley Wickham while he was a graduate student at Iowa State. The web site http://ggplot2.org provides complete documentation.

- Class: text
  Output: A grammar of graphics represents an abstraction of graphics, that is,  a theory of graphics which conceptualizes basic pieces from which you can build new graphics and graphical objects. The  goal of the grammar is to “Shorten the distance from mind to page”. From Hadley Wickham's book  we learn that 

- Class: text
  Output:  The ggplot2 package "is composed of a set of independent components that can be composed in many different ways. ... you can create new graphics that are precisely tailored for your problem." These components include aesthetics which are attributes such as colour, shape, and  size, and geometric objects or geoms such as points, lines, and bars.  

- Class: text
  Output: Before we delve into details, let's review the other 2 plotting systems.

- Class: mult_question
  Output: Recall what you know about R's base plotting system. Which of the following does NOT apply to it? 
  AnswerChoices: Start with plot (or similar) function; Use annotation functions to add/modify (text, lines, points, axis); It is convenient and mirrors how we think of building plots and analyzing data; Can easily go back once the plot has started (e.g., to adjust margins or correct a typo)
  CorrectAnswer: Can easily go back once the plot has started (e.g., to adjust margins or correct a typo)
  AnswerTests: omnitest(correctVal='Can easily go back once the plot has started (e.g., to adjust margins or correct a typo)')
  Hint: Which choice is the only one which looks backward? 


- Class: mult_question
  Output: Recall what you know about R's lattice plotting system. Which of the following does NOT apply to it? 
  AnswerChoices:  Plots are created with a single function call (xyplot, bwplot, etc.); Most useful for conditioning types of plots and putting many panels on one plot; Margins and spacing are set automatically because entire plot is specified at once; Can always add to the plot once it is created
  CorrectAnswer: Can always add to the plot once it is created
  AnswerTests: omnitest(correctVal='Can always add to the plot once it is created')
  Hint: Which choice is the only one which is inconsistent with the other three? 

- Class: mult_question
  Output: If we told you that ggplot2 combines the best of base and lattice, that would mean it ...?  
  AnswerChoices: Automatically deals with spacings, text, titles but also allows you to annotate; Like lattice it allows for multipanels but more easily and intuitively; Its default mode makes many choices for you (but you can customize!); All of the others  
  CorrectAnswer: All of the others
  AnswerTests: omnitest(correctVal='All of the others')
  Hint: Which choice is the only one that encompasses the other three? 

- Class: text
  Output: Yes, ggplot2 combines the best of base and lattice. It allows for multipanel (conditioning) plots (as lattice does) but also annotation (as base does), so you can add titles and labels. It uses the low-level grid package (which comes with R) to draw the graphics. As part of its grammar philosophy, ggplot2 plots are composed of aesthetics (attributes such as size, shape, color) and geoms (points, lines, and bars), the geometric objects you see on the plot.

- Class: text
  Output: The ggplot2 package has 2 workhorse functions. The more basic workhorse function is qplot, (think quick plot), which works like the plot function in the base graphics system. It can produce many types of plots (scatter, histograms, box and whisker) while hiding tedious details from the user. Similar to lattice functions, it looks for data in a data frame or parent environment. 

- Class: text
  Output: The more advanced workhorse function in the package is ggplot, which is  more flexible and easier to customize for doing things qplot cannot do. In this lesson we'll focus on qplot.
    
- Class: cmd_question
  Output: We'll start by showing how easy and versatile qplot is. First, let's look at some data which comes with the ggplot2 package. The mpg data frame contains fuel economy data for 38 models of cars between 1999 and 2008. Run the R command str with the argument mpg. This will give you an idea of what mpg contains.
  CorrectAnswer: str(mpg)
  AnswerTests: omnitest(correctExpr='str(mpg)')
  Hint: Type str(mpg) at the command prompt.

- Class: cmd_question
  Output: We see that there are 234 points in the dataset concerning 11 different characteristics of the cars. Suppose we want to see if there's a correlation betwwen engine displacement (displ) and highway miles per gallon (hwy). As we did with the plot function of the base system we could simply call  qplot with 3 arguments, the first two are the variables we want to examine and the third argument data is set equal to the name of the dataset which contains them (in this case, mpg). Try this now.
  CorrectAnswer: qplot(displ, hwy, data = mpg)
  AnswerTests: omnitest(correctExpr='qplot(displ, hwy, data = mpg)')
  Hint: Type qplot(displ, hwy, data = mpg) at the command prompt.

- Class: cmd_question
  Output: A nice scatterplot done simply, right? All the labels are provided. The first argument is shown along the x-axis and the second along the y-axis. The negative trend (increasing displacement and lower gas mileage) is pretty clear. Now suppose we want to do the same plot but this time use different colors to distinguish between the 3 factors (subsets) of different types of drive (drv) in  the data (front-wheel, rear-wheel, and 4-wheel). Again, qplot makes this very easy. We'll just add what ggplot2 calls an aesthetic, a fourth argument, color, and set it equal to drv. Try this now. (Use the up arrow key to save some typing.)
  CorrectAnswer: qplot(displ, hwy, data = mpg, color = drv)
  AnswerTests: omnitest(correctExpr='qplot(displ, hwy, data = mpg, color = drv)')
  Hint: Type qplot(displ, hwy, data = mpg, color = drv) at the command prompt.

- Class: text
  Output: Pretty cool, right? See the legend to the right which qplot helpfully supplied? The colors were automatically assigned by qplot so the legend decodes the colors for you. Notice that qplot automatically used dots or points to indicate the data. These points are geoms (geometric objects). We could have used a different aesthetic, for instance shape instead of color, to distinguish between the drive types.

- Class: cmd_question
  Output: Now let's add a second geom to the default points. How about some trend lines, one for each color? Just add a fifth argument, geom, and using the R function c(), set it equal to the concatenation of the two strings "point" and "smooth". The first refers to the data points and second to the trend lines we want plotted. Try this now.
  CorrectAnswer: qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth"))
  AnswerTests: omnitest(correctExpr='qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth"))')
  Hint: Type qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth")) at the command prompt.

- Class: text
  Output: Note the helpful message R returns in red telling you what function (loess) it used to create the trend lines. No need to worry - we'll see another example of method later in the lesson. Notice the gray areas surrounding each trend lines. These indicate the 95% confidence intervals for the lines.

- Class: cmd_question
  Output: Before we leave qplot's scatterplotting ability, call qplot again, this time with 3 arguments. The first is y set equal to hwy, the second is data set equal to mpg, and the third is color set equal to drv. Try this now.
  CorrectAnswer: qplot(y=hwy, data = mpg, color = drv)
  AnswerTests: omnitest(correctExpr='qplot(y=hwy, data = mpg, color = drv)')
  Hint: Type qplot(y=hwy, data = mpg, color = drv) at the command prompt.

- Class: cmd_question
  Output: What's this plot showing? We see the x-axis ranges from 0 to 250 and we remember that we had 234 data points in our set, so we can infer that each point in the plot represents one of the hwy values (indicated by the y-axis). We've created the vector myhigh for you which contains the hwy data from the mpg dataset. Look at myhigh now.
  CorrectAnswer: myhigh
  AnswerTests: omnitest(correctExpr='myhigh')
  Hint: Type myhigh at the command prompt.

- Class: text
  Output: Comparing the values of myhigh with the plot, we see the first entries in the vector (29, 29, 31, 30,...) correspond to the leftmost points in the the plot (in order), and the last entries in myhigh (28, 29, 26, 26, 26) correspond to the rightmost plotted points. So, specifying the y parameter only, without an x argument, plots the values of the y argument in the order in which they occur in the data.

- Class: cmd_question
  Output: The all-purpose qplot can also create box and whisker plots.  Call qplot now with 4 arguments. First specify the variable by which you'll split the data, in this case drv, then specify the variable which you want to examine, in this case hwy. The third argument is data (set equal to mpg), and the fourth, the geom, set equal to the string "boxplot"
  CorrectAnswer: qplot(drv,hwy,data=mpg,geom="boxplot")
  AnswerTests: omnitest(correctExpr='qplot(drv,hwy,data=mpg,geom="boxplot")')
  Hint: Type qplot(drv,hwy,data=mpg,geom="boxplot") at the command prompt.

- Class: cmd_question
  Output: We see 3 boxes, one for each drive. Now to impress you, call qplot with 5 arguments. The first 4 are just as you used previously, (drv, hwy, data set equal to mpg, and geom set equal to the string "boxplot"). Now add a fifth argument, color, equal to manufacturer. 
  CorrectAnswer: qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
  AnswerTests: omnitest(correctExpr='qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)')
  Hint: Type qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer) at the command prompt.

- Class: text
  Output: It's a little squished but we just wanted to illustrate qplot's capabilities. Notice that there are still 3 regions of the plot (determined by the factor drv). Each is subdivided into several boxes depicting different manufacturers.

- Class: cmd_question
  Output: Now, on to histograms. These display frequency counts for a single variable. Let's start with an easy one. Call qplot with 3 arguments. First specify the variable for which you want the frequency count, in this case hwy, then specify the data (set equal to mpg), and finally, the aesthetic, fill, set equal to drv. Instead of a plain old histogram, this will again use colors to distinguish the 3 different drive factors.
  CorrectAnswer: qplot(hwy, data = mpg, fill = drv)
  AnswerTests: omnitest(correctExpr='qplot(hwy, data = mpg, fill = drv)')
  Hint: Type qplot(hwy, data = mpg, fill = drv) at the command prompt.

- Class: text
  Output: It's cool that qplot can do this  so easily, but some people may find this multi-color histogram hard to interpret. Instead of using colors to distinguish between the drive factors let's use facets or panels. (That's what lattice called them.) This just means we'll split the data into 3 subsets (according to drive) and make 3 smaller individual plots of each subset in one plot (and with one call to qplot).

- Class: text
  Output: Remember that with base plot we had to do each subplot individually. The lattice system made plotting  conditioning plots  easier. Let's see how easy it is with qplot.

- Class: cmd_question
  Output:  We'll do two plots, a scatterplot and then a histogram, each with 3 facets. For the scatterplot, call qplot with 4 arguments. The first two are displ and hwy and the third is the argument data set equal to mpg. The fourth is the argument facets which will be set equal to the expression . ~ drv which is ggplot2's shorthand for number of rows (to the left of the ~) and number of columns (to the right of the ~). Here the . indicates "whatever you need" for the number of rows and drv implies 3, since there are 3 distinct drive factors. Try this now.
  CorrectAnswer: qplot(displ, hwy, data = mpg, facets = . ~ drv)
  AnswerTests: omnitest(correctExpr='qplot(displ, hwy, data = mpg, facets = . ~ drv)')
  Hint: Type qplot(displ, hwy, data = mpg, facets = . ~ drv) at the command prompt.

- Class: text
  Output: The result is a 1 by 3 array of plots. Note how each is labeled at the top with the factor label (4,f, or r).

- Class: cmd_question
  Output:  Now we'll do a histogram, again calling qplot with 4 arguments. This time, since we need only one variable for a histogram, the first is hwy and the second is the argument data set equal to mpg. The third is the argument facets which we'll set equal to the expression drv ~ . which give us a different arrangement of the facets. The fourth argument is binwidth. Set this equal to 2. Try this now.
  CorrectAnswer: qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
  AnswerTests: omnitest(correctExpr='qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)')
  Hint: Type qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2) at the command prompt.

- Class: mult_question
  Output: The facets argument, drv ~ ., resulted in what arrangement of facets?
  AnswerChoices:  1 by 3; 3 by 1; 2 by 2; huh?
  CorrectAnswer:  3 by 1
  AnswerTests: omnitest(correctVal='3 by 1')
  Hint: How many row? How many columns?

- Class: text
  Output: Now we'll use qplot to analyze data that's a little more complicated. This is data provided with the ggplot2 package. It contains information on various characteristics of diamonds.  

- Class: cmd_question
  Output:  Run the R command str with the argument diamonds to see what the data looks like.
  CorrectAnswer: str(diamonds)
  AnswerTests: omnitest(correctExpr='str(diamonds)')
  Hint: Type str(diamonds) at the command prompt.

- Class: mult_question
  Output: From the output, how many characteristics of diamonds do you think this data contains?
  AnswerChoices:  10; 53940; 5394; 53950
  CorrectAnswer:  10
  AnswerTests: omnitest(correctVal='10')
  Hint: The output says there are 53940 observations of 10 variables. This is followed by a 10-long list of characteristics (carat, cut, color, etc.) that can apply to diamonds.

- Class: mult_question
  Output: From the output of str, how many  diamonds are characterized in this dataset?
  AnswerChoices:  10; 53940; 5394; 53950
  CorrectAnswer:  53940
  AnswerTests: omnitest(correctVal='53940')
  Hint: The output says there are 53940 observations of 10 variables. This is followed by a 10-long list of characteristics (carat, cut, color, etc.) that can apply to diamonds.

- Class: cmd_question
  Output:  Now let's plot a histogram of the price of the 53940 diamonds in this dataset. Recall that a histogram requires only one variable of the data, so run the R command qplot with the first argument price and the argument data set equal to diamonds. This will show the frequency of different diamond prices.
  CorrectAnswer: qplot(price,data=diamonds)
  AnswerTests: omnitest(correctExpr='qplot(price,data=diamonds)')
  Hint: Type qplot(price,data=diamonds) at the command prompt.

- Class: cmd_question
  Output:  Not only do you get a histogram, but you also get a message about the binwidth defaulting to range/30. Recall that range refers to the spread or dispersion of the data, in this case price of diamonds. Run  the R command range now with diamonds$price as its argument.
  CorrectAnswer: range(diamonds$price)
  AnswerTests: omnitest(correctExpr='range(diamonds$price)')
  Hint: Type range(diamonds$price) at the command prompt.

- Class: text
  Output: We see that range returned the minimum and maximum prices, so the diamonds vary in price from $326 to $18823. We've done the arithmetic for you, the range (difference between these two numbers) is $18497.

- Class: cmd_question
  Output:  Rerun qplot now with 3 arguments. The first is price, the second is data set equal to diamonds, and the third is binwidth set equal to 18497/30). (Use the up arrow to save yourself some typing.) See if the plot looks familiar.
  CorrectAnswer: qplot(price,data=diamonds,binwidth=18497/30)
  AnswerTests: omnitest(correctExpr='qplot(price,data=diamonds,binwidth=18497/30)')
  Hint: Type qplot(price,data=diamonds,binwidth=18497/30) at the command prompt.

- Class: text
  Output: No more messages in red, but a histogram almost identical to the previous one! If you typed 18497/30 at the command line you would get the result 616.5667. This means that the height of each bin tells you how many diamonds have a price between x and x+617 where x is the left edge of the bin. 

- Class: cmd_question
  Output:  We've created a vector containing integers that are multiples of 617 for you. It's call brk. Look at it now.
  CorrectAnswer: brk
  AnswerTests: omnitest(correctExpr='brk')
  Hint: Type brk at the command prompt.

- Class: cmd_question
  Output:  We've also created a vector containing the number of diamonds with  prices between each pair of adjacent entries of brk. For instance, the first count is the number of diamonds with prices between 0 and $617, and the second is the number of diamonds with prices between $617 and $1234. Look at this vector counts now. 
  CorrectAnswer: counts
  AnswerTests: omnitest(correctExpr='counts')
  Hint: Type counts at the command prompt.

- Class: text
  Output: See how it matches the histogram you just plotted? So, qplot really works!

- Class: cmd_question
  Output:  You're probably sick of it  but rerun qplot again, this time with 4 arguments. The first 3 are the same as the command you just ran  (price, data set equal to diamonds, and binwidth set equal to 18497/30). (Use the up arrow to save yourself some typing.) The fourth argument is fill set equal to cut. The shape of the histogram will be familiar, but it will be more colorful.
  CorrectAnswer: qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
  AnswerTests: omnitest(correctExpr='qplot(price,data=diamonds,binwidth=18497/30,fill=cut)')
  Hint: Type qplot(price,data=diamonds,binwidth=18497/30,fill=cut) at the command prompt.

- Class: text
  Output: This shows how the counts within each price grouping (bin) are distributed among the different cuts of diamonds. Notice how qplot displays these distributions relative to the cut legend on the right. The fair cut diamonds are at the bottom of each bin, the good cuts are above them, then the very good above them, until the ideal cuts are at the top of each bin. This display shows that there are very few fair cut diamonds priced above $5000.

- Class: cmd_question
  Output:  Now we'll replot the histogram as a density function. The shape will be similar but the scale on the y-axis will be different since, by definition, the density function is nonnegative everywhere, and the area under the curve is one. To do this, simply call qplot with 3 arguments. The first 2 are  price and data (set equal to diamonds). The third is geom which should be set equal to the string "density". Try this now. 
  CorrectAnswer: qplot(price,data=diamonds,geom="density")
  AnswerTests: omnitest(correctExpr='qplot(price,data=diamonds,geom="density")')
  Hint: Type qplot(price,data=diamonds,geom="density") at the command prompt.

- Class: text
  Output:  Notice that the shape is similar to that of the histogram we saw previously. The highest peak is close to 0 on the x-axis meaning that most of the diamonds in the dataset were inexpensive. In general, as prices increase (move right along the x-axis) the number of diamonds (at those prices) decrease. The exception to this is when the price is around $4000; there's a slight increase in frequency. Let's see if cut is responsible for this increase. 

- Class: cmd_question
  Output: Rerun qplot, this time with 4 arguments. The first 2 are the usual, and the third is geom set equal to "density". The fourth is color set equal to cut. Try this now.
  CorrectAnswer: qplot(price,data=diamonds,geom="density",color=cut)
  AnswerTests: omnitest(correctExpr='qplot(price,data=diamonds,geom="density",color=cut)')
  Hint: Type qplot(price,data=diamonds,geom="density",color=cut) at the command prompt.

- Class: text
  Output: See how easily qplot did this? Four of the five cuts have 2 peaks, one at price $1000 and the other between $4000 and $5000. The exception is the Fair cut which has a single peak at $2500. This gives us a little more understanding of the histogram we saw before.

- Class: text
  Output: Let's move on to scatterplots. For these we'll need to specify two variables from the diamond dataset.

- Class: cmd_question
  Output:  Let's start with carat and price. Use these as the first 2 arguments of qplot. The third should be data set equal to the dataset. Try this now.
  CorrectAnswer: qplot(carat,price,data=diamonds)
  AnswerTests: omnitest(correctExpr=' qplot(carat,price,data=diamonds)')
  Hint: Type  qplot(carat,price,data=diamonds) at the command prompt.

- Class: text
  Output: We see the positive trend here, as the number of carats increases the price also goes up.

- Class: cmd_question
  Output:  Now rerun the same command, except add a fourth parameter, shape, set equal to cut.
  CorrectAnswer: qplot(carat,price,data=diamonds, shape=cut)
  AnswerTests: omnitest(correctExpr='qplot(carat,price,data=diamonds, shape=cut)')
  Hint: Type qplot(carat,price,data=diamonds, shape=cut) at the command prompt.

- Class: cmd_question
  Output:  The same scatterplot appears, except the cuts of the diamonds are distinguished by different symbols. The legend at the right tells you which symbol is associated with each cut. These are small and hard to read, so rerun the same command, except this time instead of setting the argument shape equal to cut, set the argument color equal to cut.
  CorrectAnswer: qplot(carat,price,data=diamonds, color=cut)
  AnswerTests: omnitest(correctExpr='qplot(carat,price,data=diamonds, color=cut)')
  Hint: Type qplot(carat,price,data=diamonds, color=cut) at the command prompt.

- Class: text
  Output: That's easier to see! Now we'll close with two, more complicated scatterplot examples.

- Class: cmd_question
  Output:  We'll rerun the plot you just did (carat,price,data=diamonds and color=cut) but add two more parameters. The first is the argument geom set equal to the concatenation of the 2 strings, "point" and "smooth". The second is the argument method set equal to the string "lm". Try this now.
  CorrectAnswer: qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),method="lm")
  AnswerTests: omnitest(correctExpr='qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),method="lm")')
  Hint: Type qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),method="lm") at the command prompt.


- Class: text
  Output: Again, we see the same scatterplot, but slightly more compressed and showing 5 regression lines, one for each cut of diamonds. It might be hard to see, but around each line is a shadow showing the 95% confidence interval. We see, unsurprisingly, that the better the cut, the steeper (more positive) the slope of the lines.

- Class: cmd_question
  Output:  Finally, let's rerun that plot you just did (carat,price,data=diamonds, color=cut, geom =c("point","smooth"),method="lm") but add one (just one) more argument. The new argument is facets and it should be set equal to the formula .~cut. Recall that the facets argument indicates we want a multi-panel plot. The symbol to the left of the tilde indicates rows (in this case just one) and the symbol to the right of the tilde indicates columns (in this five, the number of cuts). Try this now.
  CorrectAnswer: qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),method="lm",facets=.~cut)
  AnswerTests: omnitest(correctExpr='qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),method="lm",facets=.~cut)')
  Hint: Type qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),method="lm",facets=.~cut) at the command prompt.

- Class: text
  Output:  Pretty good, right? Not too difficult either. Let's review what we learned!

- Class: mult_question
  Output: Which of the following is a basic workhorse function of ggplot2?
  AnswerChoices:  hist; xyplot; scatterplot; gplot; qplot
  CorrectAnswer:  qplot
  AnswerTests: omnitest(correctVal='qplot')
  Hint: Which function did we invoke the most in this lesson?

- Class: mult_question
  Output:  Which types of plot does qplot plot?
  AnswerChoices:  histograms; scatterplots; box and whisker plots; all of the others
  CorrectAnswer: all of the others
  AnswerTests: omnitest()
  Hint: That qplot is amazing! It seems to do everything!

- Class: mult_question
  Output:  What does the gg in ggplot2 stand for?
  AnswerChoices:  good grief; grammar of graphics; goto graphics; good graphics
  CorrectAnswer: grammar of graphics
  AnswerTests: omnitest(correctVal='grammar of graphics')
  Hint: Think of building blocks and components.

- Class: mult_question
  Output:  True or False? The geom argument takes a string for a value.
  AnswerChoices:  True; False
  CorrectAnswer: True
  AnswerTests: omnitest(correctVal='True')
  Hint: Recall our examples, for instance, geom="density".

- Class: mult_question
  Output:  True or False? The method argument takes a string for a value.
  AnswerChoices:  True; False
  CorrectAnswer: True
  AnswerTests: omnitest(correctVal='True')
  Hint: Recall our examples, for instance, method="lm".

- Class: mult_question
  Output:  True or False? The binwidth argument takes a string for a value.
  AnswerChoices:  True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: Recall our examples, for instance, binwidth=18497/30.

- Class: mult_question
  Output:  True or False? The user must specify x- and y-axis labels when using qplot. 
  AnswerChoices:  True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: Recall our examples when we saw labels that we didn't specify.

- Class: text
  Output: Congrats! You've finished plot 1 of  ggplot2. In the next lesson the plot thickens.
