- Class: meta
  Course: Exploratory_Data_Analysis
  Lesson: GGPlot2_Part1
  Author: Swirl Coders
  Type: Coursera
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output: "GGPlot2_Part1. (Slides for this and other Data Science courses may be found at github https://github.com/DataScienceSpecialization/courses/. If you care to use them, they must be downloaded as a zip file and viewed locally. This lesson corresponds to 04_ExploratoryAnalysis/ggplot2.)"


- Class: text
  Output:  In another lesson, we gave you an overview of the three plotting systems in R. In this lesson we'll focus on the third and newest plotting system in R, ggplot2.  As we did with the other two systems, we'll focus on creating graphics on the screen device rather than another graphics device.

- Class: text
  Output:  The ggplot2 package is an add-on package available from CRAN via install.packages(). (Don't worry, we've done it for you already.) It is an implementation of The Grammar of Graphics, an abstract concept (as well as book) authored and invented by Leland Wilkinson and implemented by Hadley Wickham while he was a graduate student at Iowa State. The web site http://ggplot2.org provides complete documentation.

- Class: text
  Output: A grammar of graphics represents an abstraction of graphics, that is,  a “theory” of graphics which conceptualizes basic pieces from which you can build new graphics and graphical objects. The  goal of the grammar is to “Shorten the distance from mind to page”. Here's a quote from Hadley Wickham's ggplot2 book...

- Class: text
  Output:  “In brief, the grammar tells us that a statistical graphic is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars). The plot may also contain statistical transformations of the data and is drawn on a specific coordinate system”. The grammar "is composed of a set of independent components that can be composed in many different ways. ... you can create new graphics that are precisely tailored for your problem."

- Class: text
  Output: Before we delve into details, let's review the other 2 plotting systems.

- Class: mult_question
  Output: Recall what you know about R's base plotting system. Which of the following does NOT apply to it? 
  AnswerChoices: Start with plot (or similar) function; Use annotation functions to add/modify (text, lines, points, axis); Convenient, mirrors how we think of building plots and analyzing data; Can easily go back once the plot has started (e.g., to adjust margins or correct a typo)
  CorrectAnswer: Can easily go back once the plot has started (e.g., to adjust margins or correct a typo)
  AnswerTests: omnitest(correctVal='Can easily go back once the plot has started (e.g., to adjust margins or correct a typo)')
  Hint: Which choice is the only one which looks backward? 


- Class: mult_question
  Output: Recall what you know about R's lattice plotting system. Which of the following does NOT apply to it? 
  AnswerChoices:  Plots are created with a single function call (xyplot, bwplot, etc.); Most useful for conditioning types of plots and putting many panels on one plot; Margins and spacing are set automatically because entire plot is specified at once; Can always add to the plot once it is created
  CorrectAnswer: Can always add to the plot once it is created
  AnswerTests: omnitest(correctVal='Can always add to the plot once it is created')
  Hint: Which choice is the only one which is inconsistent with the other three? 

- Class: mult_question
  Output: If we told you that ggplot2 combines the best of base and lattice, that would mean it ...?  
  AnswerChoices: Automatically deals with spacings, text, titles but also allows you to annotate; Like lattice it allows for multipanels but more easily and intuitively; Its default mode makes many choices for you (but you can customize!); All of the above  
  CorrectAnswer: All of the above
  AnswerTests: omnitest(correctVal='All of the above')
  Hint: Which choice is the only one that encompasses the other three? 

- Class: text
  Output: Yes, ggplot2 combines the best of base and lattice. It allows for multipanel (conditioning) plots (as lattice does) but also annotation (as base does), so you can add titles and labels. It also uses the grid package (which comes with R) to draw the graphics. As part of its grammar philosophy, ggplot2 plots are composed of aesthetics (attributes such as size, shape, color) and geoms (points, lines), the geometric objects you see on the plot.

- Class: text
  Output: The basic workhorse function in ggplot2 is qplot, (think quick plot) which works like the plot function in the base graphics system. It hides many tedious details from the user. Similar to lattice, it looks for data in a data frame or parent environment. The more advanced workhorse function in the package is ggplot, which is  more flexible for doing things qplot() cannot do. In this lesson we'll focus on qplot.
    

- Class: cmd_question
  Output: We'll start by showing how easy and versatile qplot is. First, let's look at some data which might be familiar to you. It comes with the ggplot2 package. The mpg data frame contains fuel economy data for 38 models of cars between 1999 and 2008. Run the R command str with the argument mpg. This will give you an idea of what mpg contains.
  CorrectAnswer: str(mpg)
  AnswerTests: omnitest(correctExpr='str(mpg)')
  Hint: Type str(mpg) at the command prompt.

- Class: cmd_question
  Output: Suppose we want to see if there's a correlation betwwen engine displacement (disp) and highway miles per gallon (hwy). As we did with the plot function of the base system we could simply call  qplot with 3 arguments, the first two are the variables we want to examine and the third argument data is set equal to the name of the dataset which contains them (in this case, mpg). Try this now.
  CorrectAnswer: qplot(displ, hwy, data = mpg)
  AnswerTests: omnitest(correctExpr='qplot(displ, hwy, data = mpg)')
  Hint: Type qplot(displ, hwy, data = mpg) at the command prompt.

- Class: cmd_question
  Output: Simple, right? The first argument is shown along the x-axis and the second along the y-axis. The negative trend (increasing displacement and lower gas mileage) is pretty clear. Now suppose we want to do the same plot but this time use different colors to distinguish between the 3 factors (subsets) of different types of drive (drv) in  the data (that is, front-wheel, rear-wheel, or 4-wheel). Again, qplot makes this very easy. We'll just add what ggplot2 calls an aesthetic, a fourth argument, color, and set it equal to the factor drv. Try this now. (Use the up arrow key to save some typing.)
  CorrectAnswer: qplot(displ, hwy, data = mpg, color = drv)
  AnswerTests: omnitest(correctExpr='qplot(displ, hwy, data = mpg, color = drv)')
  Hint: Type qplot(displ, hwy, data = mpg, color = drv) at the command prompt.

- Class: text
  Output: Pretty cool, right? See the legend to the right which qplot helpfully supplied? The colors were automatically assigned by qplot so the legend decodes the colors for you. Notice that qplot automatically used dots or points to indicate the data. These points are geoms (geometric objects).

- Class: cmd_question
  Output: Now let's add a second geom. How about some trend lines, one for each color? Just add a fifth argument, geom, and using the R function c(), set it equal to the concatenation of the two strings "point" and "smooth". The first refers to the data points and second to the trend lines we want plotted. Try this now.
  CorrectAnswer: qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth"))
  AnswerTests: omnitest(correctExpr='qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth"))')
  Hint: Type qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth")) at the command prompt.

_ Class: text
  Output: Note the gray areas surrounding each trend lines. These indicate the 95% confidence intervals for the lines.


- Class: cmd_question
  Output: The function qplot can also do histograms which display frequency counts for a single variable. Let's do an easy one. Call qplot with 3 arguments. First specify the variable for which you want the frequency count, in this case hwy, then specify the data (set equal to mpg), and finally, the aesthetic, fill, set equal to drv. Instead of a plain old histogram, this will again use colors to distinguish the 3 different drive factors.
  CorrectAnswer: qplot(hwy, data = mpg, fill = drv)
  AnswerTests: omnitest(correctExpr='qplot(hwy, data = mpg, fill = drv)')
  Hint: Type qplot(hwy, data = mpg, fill = drv) at the command prompt.

- Class: text
  Output: It's cool that qplot can do this  so easily, but some people may find this multi-color histogram hard to interpret. Instead of using colors to distinguish between the drive factors let's use facets or panels. (That's what lattice called them.) This just means we'll split the data into 3 subsets (according to drive) and make 3 smaller individual plots of each subset in one plot (and with one call to qplot).

- Class: text
  Output: Remember that with base plot we had to do each subplot individually. The lattice system made plotting  conditioning plots  easier. Let's see how easy it is with qplot.

- Class: cmd_question
  Output:  We'll do two plots, a scatterplot and then a histogram, each with 3 facets. For the scatterplot, call qplot with 4 arguments. The first two are displ and hwy and the third is the argument data set equal to mpg. The fourth is the argument facets which will be set equal to the expression . ~ drv which is ggplot2's shorthand for number of rows (to the left of the ~) and number of columns (to the right of the ~). Here the . indicates "whatever you need" for the number of rows and drv implies 3, since there are 3 distinct drive factors. Try this now.
  CorrectAnswer: qplot(displ, hwy, data = mpg, facets = . ~ drv)
  AnswerTests: omnitest(correctExpr='qplot(displ, hwy, data = mpg, facets = . ~ drv)')
  Hint: Type qplot(displ, hwy, data = mpg, facets = . ~ drv) at the command prompt.

- Class: text
  Output: The result is a 1 by 3 array of plots. Note how each is labeled at the top with the factor label (4,f, or r).

- Class: cmd_question
  Output:  Now we'll do a histogram, again calling qplot with 4 arguments. This time, since we need only one variable the first is hwy and the second is the argument data set equal to mpg. The third is the argument facets which we'll set equal to the expression drv ~ . which give us a different arrangement of the facets. The fourth argument is binwidth. Set this equal to 2. Try this now.
  CorrectAnswer: qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
  AnswerTests: omnitest(correctExpr='qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)')
  Hint: Type qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2) at the command prompt.

- Class: mult_question
  Output: The facets argument, drv ~ ., resulted in what arrangement of facets?
  AnswerChoices:  1 by 3; 3 by 1; 2 by 2; huh?
  CorrectAnswer:  3 by 1
  AnswerTests: omnitest(correctVal='3 by 1')
  Hint: How many row? How many columns?

- Class: text
  Output: Now we'll use qplot to analyze data that's a little more complicated. This was data used in a Johns Hopkins study to understand the effects of indoor environmental pollution, particularly mouse allergen, on children with asthma.

- Class: text
  Output: Unlike base plotting,  the lattice system does not have a "two-phase" aspect with separate plotting and annotation. Instead all plotting and annotation is done at once with a single function call.

- Class: text
  Output: The lattice system, as the base does, provides several different plotting functions. These include xyplot for creating scatterplots, bwplot for box-and-whiskers plots or boxplots, and  histogram for  histograms. There are several others (stripplot, dotplot, splom and levelplot), which we won't cover here.

- Class: text
  Output: Lattice functions generally take a formula for their first argument, usually of the form y ~ x. This indicates that y depends on x, so in a scatterplot y would be plotted on the y-axis and x on the x-axis.

- Class: text
  Output: Here's an example of  typical lattice plot call,  xyplot(y ~ x | f * g, data). The f and g represent the optional conditioning variables. The * represents interaction between them. Remember when we said that lattice is good for plotting multivariate data? That's where these conditioning variables come into play.

- Class: text
  Output: The second argument is the data frame or list from which the variables in the formula should be looked up.  If no data frame or list is passed, then the parent frame is used. If no other arguments are passed, the default values are used.

 
- Class: cmd_question
  Output:  Now try running xyplot with the formula Ozone~Wind as the first argument and the second argument data set equal to airquality.
  CorrectAnswer: xyplot(Ozone ~ Wind, data = airquality)
  AnswerTests: omnitest(correctExpr='xyplot(Ozone ~ Wind, data = airquality)')
  Hint: Type xyplot(Ozone ~ Wind, data = airquality) at the command prompt.

- Class: text
  Output: Look vaguely familiar? The dots are blue, instead of black, but lattice labeled the axes for you. You can use some of the same graphical parameters (e.g., pch and col) that you used in the base package in calls to lattice functions.

- Class: cmd_question
  Output:  Now rerun xyplot with the formula Ozone~Wind as the first argument and the second argument data set equal to airquality (use the up arrow to save typing). This time add the arguments col set equal to "red", pch set equal to 8, and main set equal to "Big Apple Data".
  CorrectAnswer: xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
  AnswerTests: omnitest(correctExpr='xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")')
  Hint: Type xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data") at the command prompt.

- Class: text
  Output: Red snowflakes are cool, right? Now that you’ve learned the basics of xyplot() and some of it arguments, you can experimjent a little more by yourself to discover what other arguments and colours are available by invoking swirl's play() function to experiment and then calling nxt() when you’re done playing! 

- Class: text
  Output: Now you'll see how easy it is to generate a multipanel plot using a single lattice command. 

- Class: cmd_question
  Output:  Run xyplot with the formula Ozone~Wind | as.factor(Month) as the first argument and the second argument data set equal to airquality (use the up arrow to save typing). So far, not much is different, right? Add a third argument, layout, set equal to c(5,1). 
  CorrectAnswer: xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
  AnswerTests: omnitest(correctExpr='xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))')
  Hint: Type xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1)) at the command prompt.

- Class: mult_question
  Output: Note that the default color and plotting character are back. What did the as.factor(Month) do?
  AnswerChoices:  Displayed and labeled each subplot with the month's integer; Displayed the data by individual months; Huh?; Randomly divided the data into 5 panels
  CorrectAnswer:  Displayed and labeled each subplot with the month's integer
  AnswerTests: omnitest(correctVal='Displayed and labeled each subplot with the month\'s integer')
  Hint: Obviously the data is broken up and displayed by month. The as.factor made sure each panel was labeled correctly.

- Class: cmd_question
  Output:  Since Month is a named column of the airquality dataframe we had to tell R to treat it as a factor. To see how this affects the plot, rerun the xyplot command you just ran, but use Ozone ~ Wind | Month instead of Ozone ~ Wind | as.factor(Month) as the first argument.  
  CorrectAnswer: xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
  AnswerTests: omnitest(correctExpr='xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))')
  Hint: Type xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1)) at the command prompt.

- Class: text
  Output: Not as informative, right? The word Month in each panel really doesn't tell you much if it doesn't identify which month it's plotting. Notice that the actual data is the same between the two plots, though.

- Class: text
  Output: Lattice functions behave differently from base graphics functions in one critical way. Recall that base graphics functions plot data directly to the graphics device (e.g., screen, or file such as a PDF file). In contrast, lattice graphics functions return an object of class trellis.

- Class: figure
  Output: The print methods for lattice functions actually do the work of plotting the data on the graphics device. They return "plot objects" that can be stored (but it’s usually better to just save the code  and data). On the command line, trellis objects are auto-printed so that it appears the function is plotting the data.
  Figure: clearPlot.R
  FigureType: new

- Class: cmd_question
  Output:  To see this, create a variable p which is assigned the output of this simple call to xyplot, xyplot(Ozone~Wind,data=airquality).
  CorrectAnswer: p <- xyplot(Ozone~Wind,data=airquality)
  AnswerTests: expr_creates_var("p"); omnitest(correctExpr='p <- xyplot(Ozone~Wind,data=airquality)')
  Hint: Type p <- xyplot(Ozone~Wind,data=airquality) at the command prompt.

- Class: text
  Output: Nothing plotted, right? But the object p is around.

- Class: cmd_question
  Output:  Type p or print(p) now to see it.
  CorrectAnswer: p
  AnswerTests: ANY_of_exprs('p','print(p)')
  Hint: Type p or print(p) at the command prompt.
 
- Class: cmd_question
  Output: Like magic, it appears. Now run the R command names with p as its argument.
  CorrectAnswer: names(p)
  AnswerTests: omnitest(correctExpr='names(p)')
  Hint: Type names(p) at the command prompt.
 
- Class: cmd_question
  Output: We see that the trellis object p has 45 named attributes, the first of which is "formula" which isn't too surprising. A lot of these attributes are probably NULL in value. We've done some behind-the-scenes work for you and created two vectors. The first, mynames, is a character vector of the names in p. The second is a boolean vector, myfull,  which has TRUE values for nonnull entries of p. Run mynames[myfull] to see which entries of p are not NULL.
  CorrectAnswer: mynames[myfull]
  AnswerTests: omnitest(correctExpr='mynames[myfull]')
  Hint: Type mynames[myfull] at the command prompt.
 
- Class: cmd_question
  Output: Wow! 29 nonNull values for one little plot. Note that a lot of them are like the ones we saw in the base plotting system. Let's look at the values of some of them. Type p[["formula"]] now.
  CorrectAnswer: p[["formula"]]
  AnswerTests: omnitest(correctExpr='p[["formula"]]')
  Hint: Type p[["formula"]] at the command prompt.
 
- Class: cmd_question
  Output: Not surprising, is it? It's a familiar formula. Now look at p's x.limits. Remember the double square brackets and quotes. 
  CorrectAnswer: p[["x.limits"]]
  AnswerTests: omnitest(correctExpr='p[["x.limits"]]')
  Hint: Type p[["x.limits"]] at the command prompt.
 
- Class: cmd_question
  Output: They match the plot, right? The x values are indeed between .37 and 22.03. Finally, look at the value of the named element call of p. Remember the double square brackets and quotes. 
  CorrectAnswer: p[["call"]]
  AnswerTests: omnitest(correctExpr='p[["call"]]')
  Hint: Type p[["call"]] at the command prompt.

- Class: text
  Output: Again, not surprising. Before we wrap up, let's talk about lattice's panel functions which control what happens inside each panel of the plot. The ease of making multi-panel plots makes lattice very appealing. The lattice package comes with default panel functions, but you can customize what happens in each panel. 

- Class: cmd_question
  Output: Panel functions receive the x and y coordinates of the data points in their panel (along with any optional arguments). To see this, we've created some data for you - two 100-long vectors, x and y. For its first 50 values y is a function of x, for the last 50 values, y is random. We've also defined a 100-long factor vector f which distinguishes between the first and last 50 elements of the two vectors. Run the R command table with f as it argument.
  CorrectAnswer: table(f)
  AnswerTests: omnitest(correctExpr='table(f)')
  Hint: Type table(f) at the command prompt.

- Class: cmd_question
  Output: The first 50 entries of f are "Group 1" and the last 50 are "Group 2". Run xyplot with two arguments. The first is the formula y~x|f, and the second is layout set equal to c(2,1). Note that we're not providing an explicit data argument, so xyplot will look in the environment and see the x and y that we've generated for you.
  CorrectAnswer: xyplot(y ~ x | f, layout = c(2, 1))
  AnswerTests: omnitest(correctExpr='xyplot(y ~ x | f, layout = c(2, 1))')
  Hint: Type xyplot(y ~ x | f, layout = c(2, 1)) at the command prompt.

- Class: cmd_question
  Output: To understand this a little better look at the variable v1 we've created for you.
  CorrectAnswer: v1
  AnswerTests: omnitest(correctExpr='v1')
  Hint: Type v1 at the command prompt.

- Class: cmd_question
  Output: The first two numbers are the range of the x values of Group 1 and the last two numbers are the range of y values of Group 1. See how they match the values of the left panel (Group 1) in the plot. Now look at v2 which holds the comparable numbers for Group 2.
  CorrectAnswer: v2
  AnswerTests: omnitest(correctExpr='v2')
  Hint: Type v2 at the command prompt.

- Class: cmd_question
  Output: Again, the values match the plot. That's reassuring. We've copied some code from the slides for you. To see it, type myedit("plot1.R"). This will open your editor and display the R code in it.
  CorrectAnswer: myedit("plot1.R")
  AnswerTests: omnitest(correctExpr='myedit("plot1.R")')
  Hint: Type myedit("plot1.R") at the command prompt.

- Class: mult_question
  Output: How many calls to basic lattice plotting functions are there in plot1.R?
  AnswerChoices: 1;2;3
  CorrectAnswer: 1
  AnswerTests: omnitest(correctVal='1')
  Hint: How many calls to xyplot are there?

- Class: mult_question
  Output: Note the panel function. How many formal arguments does it have?
  AnswerChoices: 1;2;3
  CorrectAnswer: 3
  AnswerTests: omnitest(correctVal='3')
  Hint: You have to count the ... as an argument?
 
- Class: text
  Output: The panel function has 3 arguments, x, y and ... . This last stands for all other arguments (such as graphical parameters) you might want to include. There are 2 lines in the panel function. Each invokes a panel method, the first to plot the data in each panel (panel.xyplot), the second to draw a horizontal line in each panel (panel.abline). Note the similarity of this last call to that of the base plotting function of the same name.

- Class: cmd_question
  Output: We've defined a function for you, pathtofile, which takes a filename as its argument. This makes sure R can find the file on your computer. Now run the R command source with two arguments. The first is the call to pathtofile with the string "plot1.R" as its argument and the second is the argument local set equal to TRUE. This will run the code in plot1.R for you so you can see how it works.
  CorrectAnswer: source(pathtofile("plot1.R"),local=TRUE)
  AnswerTests: omnitest(correctExpr='source(pathtofile("plot1.R"),local=TRUE)')
  Hint: Type source(pathtofile("plot1.R"),local=TRUE) at the command prompt.

- Class: mult_question
  Output: See how the lines appear. The plot shows two panels because...?
  AnswerChoices: f contains 2 factors; there are 2 calls to panel methods; lattice can handle at most 2 panels; there are 2 variables
  CorrectAnswer: f contains 2 factors
  AnswerTests: omnitest(correctVal='f contains 2 factors')
  Hint: The number of panels depends on the conditioning variable, and in this case it is f.
 
- Class: cmd_question
  Output: We've copied another piece of similar code, i.e., a call to xyplot with a custom panel function, from the slides. To see it, type myedit("plot2.R"). This will open your editor and display the R code in it.
  CorrectAnswer: myedit("plot2.R")
  AnswerTests: omnitest(correctExpr='myedit("plot2.R")')
  Hint: Type myedit("plot2.R") at the command prompt.

- Class: text
  Output: You can see how plot2.R differs from plot1.R, right? 

- Class: cmd_question
  Output: Again, run the R command source with  the two arguments pathtofile("plot2.R") and local=TRUE. This will run the code in plot2.R.
  CorrectAnswer: source(pathtofile("plot2.R"),local=TRUE)
  AnswerTests: omnitest(correctExpr='source(pathtofile("plot2.R"),local=TRUE)')
  Hint: Type source(pathtofile("plot2.R"),local=TRUE) at the command prompt.

- Class: mult_question
  Output: The regression lines are red because ...?
  AnswerChoices: R always plots regression lines in red; R is the first letter of the word red; the custom panel function specified a col argument
  CorrectAnswer: the custom panel function specified a col argument
  AnswerTests: omnitest(correctVal='the custom panel function specified a col argument')
  Hint: Look carefully at the arguments in the call to panel.lmline.

- Class: figure
  Output: Before we close we'll look at how easily lattice can handle a plot with a great many panels. (The sky's the limit.) We've loaded data for you from the Mouse Allergen and Asthma Cohort Study (MAACS) which studied 150 children with asthma living in Baltimore City, many of whom were allergic to mouse allergen. This was an observational study, using a baseline home visit and a visit every 3 months for a year (so at most 5 visits). The study addressed the question, "How does indoor airborne mouse allergen vary over time and across subjects?" The reference is Ahluwalia et al., Journal of Allergy and Clinical Immunology, 2013.
  Figure: clearPlot.R
  FigureType: new

- Class: cmd_question
  Output: We've loaded the data in the variable env for you. Use the R command dim to see how big env is.
  CorrectAnswer: dim(env)
  AnswerTests: omnitest(correctExpr='dim(env)')
  Hint: Type dim(env) at the command prompt.

- Class: cmd_question
  Output: So it's 750 by 27. Since the study involved 150 children we can guess that each child has 5 rows of data, one for each visit. Run the R command length with the argument table(env$MxNum) to see if this is correct.
  CorrectAnswer: length(table(env$MxNum))
  AnswerTests: omnitest(correctExpr='length(table(env$MxNum))')
  Hint: Type length(table(env$MxNum)) at the command prompt.

 
- Class: mult_question
  Output:  So indeed there are 150 distinct identifiers in the MxNum column of the data. There are 26 other columns of data, but we're only interested in the airmus column which is a measure of airborn mouse allergen. Can lattice handle 150 panels in a single plot?
  AnswerChoices: Yes; No
  CorrectAnswer: Yes
  AnswerTests: omnitest(correctVal='Yes')
  Hint: Would we be dealing with this data if it couldn't?

- Class: cmd_question
  Output:  To save you some trouble we've defined three character strings for you, labels for the x- and y-axes and a main title. They're in the file myLabels.R, so run myedit on this file to see  them. Remember to put the file name in quotes when you call myedit.
  CorrectAnswer: myedit("myLabels.R")
  AnswerTests: omnitest(correctExpr='myedit("myLabels.R")')
  Hint: Type myedit("myLabels.R") at the command prompt.

- Class: cmd_question
  Output:  Now run source with pathtofile("myLabels.R") and local set equal to TRUE.
  CorrectAnswer: source(pathtofile("myLabels.R"),local=TRUE)
  AnswerTests: omnitest(correctExpr='source(pathtofile("myLabels.R"),local=TRUE)')
  Hint: Type source(pathtofile("myLabels.R"),local=TRUE) at the command prompt.

- Class: cmd_question
  Output: Now call xyplot with the formula log2(airmus) ~ VisitNum | as.factor(MxNum) and data set equal to env. In addition, set the argument strip equal to  FALSE,  pch set equal to 20, xlab to myxlab, ylab to myylab, and main to mymain. The plot may take awhile because it is so big.
  CorrectAnswer: xyplot(log2(airmus) ~ VisitNum | as.factor(MxNum),data=env,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
  AnswerTests: omnitest(correctExpr='xyplot(log2(airmus) ~ VisitNum | as.factor(MxNum),data=env,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)')
  Hint: Type xyplot(log2(airmus) ~ VisitNum | as.factor(MxNum),data=env,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain) at the command prompt.

- Class: text
  Output: Pretty cool, right? 150 panels, one for each child in the study. The dots (pch=20) show the (log base 2) measure of airborne allergen for each of the visits for each child. You'll notice that not all children had 5 visits.

- Class: text
  Output:  Review time!!!

- Class: mult_question
  Output: True or False? Lattice plots are constructed by a series of calls to core functions.
  AnswerChoices: True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: Recall the long call you just made to plot 150 panels in one picture. We would have broken it up if we could have, but we didn't, so we can't.

- Class: mult_question
  Output: True or False? Lattice plots are constructed with a single function call to a core lattice function (e.g. xyplot)
  AnswerChoices: True; False
  CorrectAnswer: True
  AnswerTests: omnitest(correctVal='True')
  Hint: This is the opposite of the last question which was false.

- Class: mult_question
  Output: True or False? Aspects like margins and spacing are automatically handled and defaults are usually sufficient lattice function (e.g. xyplot).
  AnswerChoices: True; False
  CorrectAnswer: True
  AnswerTests: omnitest(correctVal='True')
  Hint: In any of our examples, did we mention margins?

- Class: mult_question
  Output: True or False? The lattice system is ideal for creating conditioning plots where you examine the same kind of plot under many different conditions.
  AnswerChoices: True; False
  CorrectAnswer: True
  AnswerTests: omnitest(correctVal='True')
  Hint: Think of the ease with which lattice handles multi-panel plots.
   
- Class: mult_question
  Output: True or False? The lattice system, like the base plotting system, returns a trellis plot object.
  AnswerChoices: True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: This is the key difference between the two systems. Lattice DOES return a plot object but base doesn't.
   
- Class: mult_question
  Output: True or False?  Panel functions can NEVER be customized to modify what is plotted in each of the plot panels.
  AnswerChoices: True; False
  CorrectAnswer: False
  AnswerTests: omnitest(correctVal='False')
  Hint: Recall our advice to NEVER trust questions with NEVER and ALWAYS in them.   


- Class: text
  Output: Congrats! We hope this lesson didn't leave you climbing the trellis.
