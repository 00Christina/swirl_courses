- Class: meta
  Course: Statistical_Inference
  Lesson: Expectations
  Author: Swirl Coders
  Type: Coursera
  Organization: Johns Hopkins Bloomberg School of Public Health
  Version: 2.2.0

- Class: text
  Output: "Expectations. (Slides for this and other Data Science courses may be found at github https://github.com/bcaffo/courses/. If you care to use them, they must be downloaded as a zip file and viewed locally. This lesson corresponds to 06_Statistical_Inference/Expectations.)"

- Class: text
  Output: In this lesson, we'll discuss expectations of random variables. 

- Class: text
  Output: E(X), the expected value of a random variable X is the center of its distribution. For a discrete random variable X with PMF p(x), E(X) is defined as a sum over all possible values x of the quantity x*p(x). E(X) represents the center of mass of a collection of locations and weights, {x, p(x)}.

- Class: text
  Output: Another term for expected value is mean. Recall your high school definition of arithmetic mean (or average) as the sum of a bunch of numbers divided by the number of numbers you added together. This is consistent with the formal definition of E(X) if all the numbers are equally weighted.

- Class: cmd_question
  Output: Consider the random variable X representing a roll of a fair dice. By 'fair' we mean all the sides are equally likely to appear. What is the expected value of X? 
  CorrectAnswer: 3.5
  AnswerTests: equiv_val(3.5)
  Hint: Add the numbers from 1 to 6 and divide by 6.

- Class: cmd_question
  Output: We've defined a function for you, expect_dice, which takes a PMF as an input. For our purposes, the PMF is represented as a 6-long array of fractions. The i-th entry in the array represents the probability of i being the outcome of a dice roll. Look at expect_dice now.
  CorrectAnswer: expect_dice
  AnswerTests: omnitest(correctExpr='expect_dice')
  Hint: Type 'expect_dice' at the command prompt.

- Class: cmd_question
  Output: We've also defined probability distributions for two loaded dice, dice_high and dice_low. Look at dice_high now. 
  CorrectAnswer: dice_high
  AnswerTests: omnitest(correctExpr='dice_high')
  Hint: Type 'dice_high' at the command prompt.

- Class: cmd_question
  Output: Using the function expect_dice, calculate the expected value of a roll of dice_high and put it in the variable edh. 
  CorrectAnswer: edh <- expect_dice(dice_high)
  AnswerTests: omnitest(correctExpr='edh <- expect_dice(dice_high)')
  Hint: Type 'edh <- expect_dice(dice_high)' at the command prompt.

- Class: cmd_question
  Output: Now calculate the expected value of a roll of dice_low and put it in the variable edl. 
  CorrectAnswer: edl <- expect_dice(dice_low)
  AnswerTests: omnitest(correctExpr='edl <- expect_dice(dice_low)')
  Hint: Type 'edl <- expect_dice(dice_low)' at the command prompt.

- Class: text
  Output: You can see the effect of loading the dice on the expectations of the rolls. For high-loaded dice the expected value of a roll (on average) is 4.33 and for low-loaded dice 2.67.

- Class: text
  Output: For a continuous random variable X, the expected value is defined analogously as it was for the discrete case. Instead of summing over discrete values, however, the expectation integrates over a continuous function. 

- Class: text
  Output: It follows that E(X) is the area under the function t*f(t), where f(t) is the PDF (probability density function) of X. This definition borrows from the definition of center of mass of a continuous body.

- Class: figure
  Output: Here's a figure from the slides. It shows the constant (1) PDF on the left and the graph of t*f(t) on the right.
  Figure: plot1.R
  FigureType: new

- Class: mult_question
  Output: Since the expected value is the area under t*f(t), what is the expected value of the random variable associated with this PDF?
  AnswerChoices: 1.0; 2.0; .5; .25 
  CorrectAnswer: .5
  AnswerTests: omnitest(correctVal='.5')
  Hint: The area of the triangle is base*height/2.

- Class: figure
  Output: For the purposes of illustration, here's another figure using a PDF from our previous probability lesson. It shows the triangular PDF f(t) on the left and the parabolic t*f(t) on the right. The area under the parabola between 0 and 2 represents the expected value of the random variable associated with the PDF.
  Figure: plot2.R
  FigureType: new

- Class: cmd_question
  Output: To find the expected value of the associated random variable you need to integrate the function t*f(t). In this case, f(t) is the line represented by t/2. (You might recall this from the last probability lesson.) The function you're integrating over is t^2/2. We've defined a function for you representing this. It's called myfunc. You can use the R function integrate with myfunc, the lower bound of 0 and the upper bound of 2 to find the expected value. Do this now.
  CorrectAnswer: integrate(myfunc,0,2)
  AnswerTests: omnitest(correctExpr='integrate(myfunc,0,2)')
  Hint: Type 'integrate(myfunc,0,2)' at the command prompt.

- Class: text
  Output: One of the nice properties of the expected value operation is that it's linear. This means that, if c is a constant, then E(cX) is c*E(X). Also, if X and Y are two random variables then E(X+Y)=E(X)+E(Y). It follows that E(aX+bY)=aE(X)+bE(Y).

- Class: cmd_question
  Output: Suppose you were rolling our two loaded dice, dice_high and dice_low. You can use the formula above to compute the expected value of their average. If X_hi and X_lo represent the respective outcomes, then the expected value of the average is E((X_hi + X_lo)/2) or .5 times the sum of their respective expected values. Compute this now. Remember you stored the respective expected values in edh and edl.
  CorrectAnswer: 3.5
  AnswerTests: equiv_val(3.5)
  Hint: Type '.5*(edh+edl)' at the command prompt.

- Class: mult_question
  Output: Did you expect that?
  AnswerChoices: Yes; No 
  CorrectAnswer: Yes
  AnswerTests: omnitest(correctVal='Yes')
  Hint: The dice were loaded in opposite ways so their average should be fair. No?

- Class: text
  Output: Now we'll show that a sample mean is an unbiased estimator of a population mean. 

- Class: text
  Output: An estimator e of some parameter v is unbiased if the expected value of e equals v, i.e., E(e)=v. We'll show that the expected value of a sample mean is the population mean.

- Class: text
  Output: Let X_1, X_2, ... X_n be a collection of random variables, each from a distribution with mean mu. The sample mean is 

- Class: text
  Output: (X_1 + X_2 + ... + X_n)/n
 
- Class: text
  Output: and the expected value of this sample mean is

- Class: text
  Output: 1/n * (E(X_1) + E(X_2) + ... + E(X_n)) = (1/n)*n*mu = mu. Each of the E(X_i) equals mu since it is drawn from the population with mean mu.

- Class: text
  Output: The variance of a random variable is a measure of spread or dispersion. It is the expected (squared) distance from the mean. In other words, if X is a random variable, its variance  is defined as

- Class: text
  Output: Var(x) = E((X-E(x))^2) = E(X^2) - E(2XE(X)) + (E(X)^2) = E(X^2)-E(X)^2 

- Class: text
  Output: Densities with higher variance are more dispersed than those with lower variance.

- Class: cmd_question
  Output: We've defined a 6-long vector for you, dice_sqr, which holds the squares of the integers 1 through 6. Look at it now.
  CorrectAnswer: dice_sqr
  AnswerTests: omnitest(correctExpr='dice_sqr')
  Hint: Type dice_sqr at the command prompt.

- Class: cmd_question
  Output: Using R's ability to multiply vectors componentwise and its function 'sum' you can easily compute E(X^2) for any of the three defined dice. Simply sum the product of dice_sqr with a PDF. Recall that we defined three PDF's, (dice_fair, dice_high, and dice_low). Try this now with dice_fair and put the result in a variable ex2_fair.
  CorrectAnswer: ex2_fair <- sum(dice_fair * dice_sqr)
  AnswerTests: omnitest(correctExpr='ex2_fair <- sum(dice_fair * dice_sqr)')
  Hint: Type 'ex2_fair <- sum(dice_fair * dice_sqr)' at the command prompt.

- Class: cmd_question
  Output: Recall that the expected value of a fair dice roll is 3.5. Subtract the square of that from ex2_fair to compute the sample variance.
  CorrectAnswer: ex2_fair-3.5^2
  AnswerTests: omnitest(correctExpr='ex2_fair-3.5^2')
  Hint: Type 'ex2_fair-3.5^2' at the command prompt.

- Class: cmd_question
  Output: Now use a similar approach to compute the sample variance of dice_high. Recall that you stored the expected value of dice_high in the variable edh.
  CorrectAnswer: sum(dice_high * dice_sqr)-edh^2
  AnswerTests: equiv_val(sum(dice_high * dice_sqr)-edh^2)
  Hint: Type 'sum(dice_high * dice_sqr)-edh^2' at the command prompt.

- Class: text
  Output: It's easy to show that Var(aX)=a^2*Var(X). 

- Class: text
  Output: The square root of the variance of X is called the standard deviation of X. It's a useful measurement since it is in the same units as X.

- Class: text
  Output: Chebyshev's inequality is useful for interpreting variances though it's very conservative. This inequality states that the probability that a random variable X is at least k standard deviations from its mean is less than 1/(k^2). In other words, the probability that X is 2 standard deviations from the mean is 1/4, 3 standard deviations 1/9, 4 standard deviations 1/16, etc.

- Class: text
  Output: However this estimate is quite conservative especially for random variables that are normally distributed, that is, with bell-curve distributions. In these cases, the probability of being at least 2 standard deviations from the mean is about 5% (as compared to Chebyshev's 25%) and the probability of being at least 3 standard deviations from the mean is roughly .2% (as opposed to 11%).

- Class: text
  Output: Congrats! You've concluded this lesson on expectations. We hope it met yours.

